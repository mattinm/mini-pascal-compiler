/*
scanner.l hold the regex information for creating the lexemes for our
compiler.
*/

%{
#include "compiler.h"	/* general header for all files in project */
#include "parser.tab.h"	/* generated by parser.y via Bison */

#include <math.h>		/* for atof / atoi */
#include <string.h>		/* for strdup */
%}

%option yylineno 	/* track line numbers for error messages */
%option caseless	/* Pascal is case-insenstive */

%x MLCSTAR			/* (* ... *) multiline comment */
%x MLCBRACE 		/* { ... } multiline comment */

digit		[0-9]
real 		{digit}+\.{digit}+([eE][+-]?{digit}+)?
id 			[a-z][a-z0-9]*
whitespace	[ \t\n\r]+

%%

/******************************** BRACKETS *********************************/
\( 				{DEBUG_PRINTF(("<, LPAREN>\n")); return LPAREN; }
\) 				{DEBUG_PRINTF(("<, RPAREN>\n")); return RPAREN; }
\[ 				{DEBUG_PRINTF(("<, LBRACK>\n")); return LBRACK; }
\] 				{DEBUG_PRINTF(("<, RBRACK>\n")); return RBRACK; }

/******************************* PUNCTUATION *******************************/
\.				{DEBUG_PRINTF(("<, DOT>\n")); return DOT; }
\,				{DEBUG_PRINTF(("<, COMMA>\n")); return COMMA; }
\;				{DEBUG_PRINTF(("<, SEMICOLON>\n")); return SEMICOLON; }
\:				{DEBUG_PRINTF(("<, COLON>\n")); return COLON; }

/******************************** RELATIONS ********************************/
":="			{DEBUG_PRINTF(("<, ASSIGNOP>\n")); return ASSIGNOP; }
"<"				{DEBUG_PRINTF(("LT\n")); return LT; }
">"				{DEBUG_PRINTF(("GT\n")); return GT; }
"<="			{DEBUG_PRINTF(("LTE\n")); return LTE; }
">="			{DEBUG_PRINTF(("GTE\n")); return GTE; }
"<>"			{DEBUG_PRINTF(("NEQ\n")); return NEQ; }
"="				{DEBUG_PRINTF(("EQ\n")); return EQ; }

/********************************** SCOPES *********************************/
"program"		{DEBUG_PRINTF(("PROGRAM\n")); return PROGRAM; }
"procedure"		{DEBUG_PRINTF(("PROCEDURE\n")); return PROCEDURE; }
"function"		{DEBUG_PRINTF(("FUNCTION\n")); return FUNCTION; }

"begin"			{DEBUG_PRINTF(("BEGINS\n")); return BEGINS; }
"end"			{DEBUG_PRINTF(("END\n")); return END; }

/*********************************** LOOPS *********************************/
"do"			{DEBUG_PRINTF(("DO\n")); return DO; }
"while"			{DEBUG_PRINTF(("WHILE\n")); return WHILE; }

/******************************* CONDITIONALS ******************************/
"if"			{DEBUG_PRINTF(("IF\n")); return IF; }
"then"			{DEBUG_PRINTF(("THEN\n")); return THEN; }
"else"			{DEBUG_PRINTF(("ELSE\n")); return ELSE; }

/***************************** BOOLEAN OPERATORS ***************************/
"and"			{DEBUG_PRINTF(("AND\n")); return AND; }
"or"			{DEBUG_PRINTF(("OR\n")); return OR; }
"not"			{DEBUG_PRINTF(("NOT\n")); return NOT; }

/********************************* VAR/ARRAY *******************************/
"var"			{DEBUG_PRINTF(("VAR\n")); return VAR; }
"array"			{DEBUG_PRINTF(("ARRAY\n")); return ARRAY; }

/******************************** READ/WRITE *******************************/
"read"			{DEBUG_PRINTF(("READ\n")); return READ; }
"readln"		{DEBUG_PRINTF(("READLN\n")); return READLN; }
"write"			{DEBUG_PRINTF(("WRITE\n")); return WRITE; }
"writeln"		{DEBUG_PRINTF(("WRITELN\n")); return WRITELN; }

/********************************* INTEGERS ********************************/
"integer"		{DEBUG_PRINTF(("INTEGER\n")); return INTEGER; }
{digit}			{yylval.ival = atoi(yytext); DEBUG_PRINTF(("INTNO: %d\n", yylval.ival)); return INTNO; }

/*********************************** REALS *********************************/
"real"			{DEBUG_PRINTF(("REAL\n")); return REAL; }
{real}			{yylval.rval = atof(yytext); DEBUG_PRINTF(("REALNO: %f\n", yylval.rval)); return REALNO; }

/************************************ ID ***********************************/
{id}			{yylval.id = strtolower(strdup(yytext)); DEBUG_PRINTF(("ID: %s\n", yylval.id)); return ID; }

/******************************** WHITESPACE *******************************/
{whitespace}	{ /* whitespace */ }

/********************************* COMMENTS ********************************/
"//".*		{DEBUG_PRINT(("<%s, comment>", yytext)); /* skip comment to end of line */ }
"(*"		{BEGIN(MLCSTAR); }
"{"			{BEGIN(MLCBRACE); }		

<MLCSTAR> {
	"*)"	{BEGIN(INITIAL); }
	[^*\n]+	{ /* eat comment in chunks */ }
	"*"		{ /* eat the lone star */ }
	\n 		{ yylineno++; }
}

<MLCBRACE> {
	"}"		{BEGIN(INITIAL); }
	[^\n]+	{ /* eat comment in chunks */ }
	\n 		{ yylineno++; }
}

/********************************** UNKNOWN ********************************/
.				{printf("[%d] Unknown character: %s\n", yylineno, yytext); }

%%